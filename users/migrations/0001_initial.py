# Generated by Django 4.1.4 on 2022-12-20 21:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserBadges',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Badge name', max_length=20, verbose_name='Name')),
                ('description', models.TextField(help_text='Badge description', max_length=255, verbose_name='Description')),
                ('color', models.CharField(default='#c7c5c5', help_text='Badge color', max_length=7, verbose_name='Color')),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
            },
        ),
        migrations.CreateModel(
            name='UserUsedIP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(help_text='Used IP address', verbose_name='IP Address')),
                ('times_used', models.BigIntegerField(default=0, help_text='Times this IP was used', verbose_name='Times Used')),
            ],
            options={
                'verbose_name': 'Used IP',
                'verbose_name_plural': 'Used IPs',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(blank=True, editable=False, error_messages={'unique': 'Tag is already owned by another user. Please use another'}, help_text="This is the user's tag, is the same as its ID. This is auto-generated", max_length=50, null=True, unique=True, verbose_name='Tag')),
                ('age', models.PositiveIntegerField(blank=True, help_text="This is the user's age, calculated by its birth date.", null=True, verbose_name='Age')),
                ('birth_date', models.DateField(help_text="This is the user's birth date, used for calculating its age", verbose_name='Birth Date')),
                ('biography', models.TextField(blank=True, help_text="This is the user's bio, a quick description about them.", max_length=200, null=True, verbose_name='Biography')),
                ('company', models.CharField(blank=True, help_text="This is the user's company, if working anywhere.", max_length=100, null=True, verbose_name='Company')),
                ('locale', models.CharField(blank=True, help_text="This is the user's locale, used to filter by city.", max_length=80, null=True, verbose_name='Locale')),
                ('website', models.URLField(blank=True, help_text="This is the user's website", null=True, verbose_name='Website')),
                ('image', models.ImageField(default='defaults/person-8x.png', help_text="User's profile picture", upload_to='users/%Y/%m/%d', verbose_name='')),
                ('email_confirmed', models.BooleanField(default=False, help_text='Boolean value if user has confirmed its email address', verbose_name='Email Confirmed')),
                ('slug', models.SlugField(blank=True, editable=False, error_messages={'unique': 'Slug is already owned by another user. Please use another'}, help_text='This is a unique field used to reference each user. This is auto generated.', null=True, unique=True, verbose_name='Slug')),
                ('recovery_key', models.CharField(blank=True, editable=False, help_text="This is the user's recovery key used in password and account recovery process.", max_length=25, null=True, verbose_name='Recovery Key')),
                ('language', models.CharField(choices=[('en-us', 'English'), ('pt-br', 'PortuguÃªs (Brasil)')], default='pt-br', help_text="This is the user's language, can be used to communicate and / or translate the website", max_length=5, verbose_name='Language')),
                ('gender', models.CharField(choices=[('NI', 'Not Informed'), ('M', 'Male'), ('F', 'Female'), ('NB', 'Non Binary')], default='NI', help_text="This is the user gender, it's optional and defaults to NI.", max_length=2, verbose_name='Gender')),
                ('cover_color', models.CharField(default='#1488ac', help_text="This is the profile page's cover color, can be customized by the user. Field uses HEX colors", max_length=7, verbose_name='Cover Color')),
                ('primary_color', models.CharField(default='#0b1524', help_text="This is the user's primary color, can be used in the website and can be customized by the user. Field uses HEX colors", max_length=7, verbose_name='Primary Color')),
                ('secondary_color', models.CharField(default='#c7c7c5', help_text="This is the user's secondary color, can be used in the website and can be customized by the user. Field uses HEX colors", max_length=7, verbose_name='Secondary Color')),
                ('banned', models.BooleanField(default=False, help_text='Boolean field that indicates if this user has being banned.', verbose_name='Banned')),
                ('must_reset_password', models.BooleanField(default=False, help_text='Boolean field that indicates if this user must reset its password before logging in.', verbose_name='Must Reset Password')),
                ('badges', models.ManyToManyField(blank=True, help_text='List of badges that this user has aquired.', to='users.userbadges', verbose_name='Badges')),
                ('ips', models.ManyToManyField(editable=False, help_text='List of IPs that the user has used. Used for security checking.', to='users.userusedip', verbose_name='IPs')),
                ('user', models.OneToOneField(error_messages={'unique': 'User already has a profile.'}, help_text='The User account related to this profile', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='BannedUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Ban reason', max_length=2000, verbose_name='Reason')),
                ('date', models.DateTimeField(auto_now_add=True, help_text='Date when the ban occurred', verbose_name='Date')),
                ('ip', models.GenericIPAddressField(help_text='Banned IP address', verbose_name='IP')),
                ('profile', models.OneToOneField(help_text='Banned user profile', on_delete=django.db.models.deletion.CASCADE, to='users.userprofile', verbose_name='Profile')),
                ('responsible', models.ForeignKey(help_text='Admin responsible for banning the user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ban_responsible', to=settings.AUTH_USER_MODEL, verbose_name='Responsible')),
                ('user', models.OneToOneField(help_text='Banned user account', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Ban',
                'verbose_name_plural': 'Bans',
            },
        ),
    ]
